/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos (v5.0.0), and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2021 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 103 }

  /* === schema: public === */

  /* --- enums --- */


  /* --- tables --- */

  /**
   * **clubs**
   * - Table in database
   */
  export namespace clubs {
    export type Table = 'clubs';
    export interface Selectable {
      /**
      * **clubs.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **clubs.amount**
      * - `float4` in database
      * - `NOT NULL`, no default
      */
      amount: number;
    }
    export interface JSONSelectable {
      /**
      * **clubs.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **clubs.amount**
      * - `float4` in database
      * - `NOT NULL`, no default
      */
      amount: number;
    }
    export interface Whereable {
      /**
      * **clubs.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **clubs.amount**
      * - `float4` in database
      * - `NOT NULL`, no default
      */
      amount?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **clubs.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **clubs.amount**
      * - `float4` in database
      * - `NOT NULL`, no default
      */
      amount: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **clubs.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **clubs.amount**
      * - `float4` in database
      * - `NOT NULL`, no default
      */
      amount?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'clubs_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **execs**
   * - Table in database
   */
  export namespace execs {
    export type Table = 'execs';
    export interface Selectable {
      /**
      * **execs.ccid**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      ccid: string;
      /**
      * **execs.program**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      program: string;
    }
    export interface JSONSelectable {
      /**
      * **execs.ccid**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      ccid: string;
      /**
      * **execs.program**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      program: string;
    }
    export interface Whereable {
      /**
      * **execs.ccid**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      ccid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **execs.program**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      program?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **execs.ccid**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      ccid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **execs.program**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      program: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **execs.ccid**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      ccid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **execs.program**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      program?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'execs_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **test**
   * - Table in database
   */
  export namespace test {
    export type Table = 'test';
    export interface Selectable {
      /**
      * **test.column1**
      * - `int2` in database
      * - `NOT NULL`, no default
      */
      column1: number;
    }
    export interface JSONSelectable {
      /**
      * **test.column1**
      * - `int2` in database
      * - `NOT NULL`, no default
      */
      column1: number;
    }
    export interface Whereable {
      /**
      * **test.column1**
      * - `int2` in database
      * - `NOT NULL`, no default
      */
      column1?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **test.column1**
      * - `int2` in database
      * - `NOT NULL`, no default
      */
      column1: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **test.column1**
      * - `int2` in database
      * - `NOT NULL`, no default
      */
      column1?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'test_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **transactions**
   * - Table in database
   */
  export namespace transactions {
    export type Table = 'transactions';
    export interface Selectable {
      /**
      * **transactions.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **transactions.club**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      club: string;
      /**
      * **transactions.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **transactions.amount**
      * - `float4` in database
      * - `NOT NULL`, no default
      */
      amount: number;
    }
    export interface JSONSelectable {
      /**
      * **transactions.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **transactions.club**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      club: string;
      /**
      * **transactions.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampTzString;
      /**
      * **transactions.amount**
      * - `float4` in database
      * - `NOT NULL`, no default
      */
      amount: number;
    }
    export interface Whereable {
      /**
      * **transactions.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transactions.club**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      club?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transactions.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transactions.amount**
      * - `float4` in database
      * - `NOT NULL`, no default
      */
      amount?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **transactions.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **transactions.club**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      club: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **transactions.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **transactions.amount**
      * - `float4` in database
      * - `NOT NULL`, no default
      */
      amount: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **transactions.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **transactions.club**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      club?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **transactions.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **transactions.amount**
      * - `float4` in database
      * - `NOT NULL`, no default
      */
      amount?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'transactions_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **users**
   * - Table in database
   */
  export namespace users {
    export type Table = 'users';
    export interface Selectable {
      /**
      * **users.ccid**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      ccid: string;
      /**
      * **users.full_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      full_name: string;
      /**
      * **users.foip**
      * - `bool` in database
      * - Nullable, no default
      */
      foip: boolean | null;
      /**
      * **users.balance**
      * - `float4` in database
      * - Nullable, no default
      */
      balance: number | null;
    }
    export interface JSONSelectable {
      /**
      * **users.ccid**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      ccid: string;
      /**
      * **users.full_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      full_name: string;
      /**
      * **users.foip**
      * - `bool` in database
      * - Nullable, no default
      */
      foip: boolean | null;
      /**
      * **users.balance**
      * - `float4` in database
      * - Nullable, no default
      */
      balance: number | null;
    }
    export interface Whereable {
      /**
      * **users.ccid**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      ccid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.full_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      full_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.foip**
      * - `bool` in database
      * - Nullable, no default
      */
      foip?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.balance**
      * - `float4` in database
      * - Nullable, no default
      */
      balance?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **users.ccid**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      ccid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **users.full_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      full_name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **users.foip**
      * - `bool` in database
      * - Nullable, no default
      */
      foip?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment;
      /**
      * **users.balance**
      * - `float4` in database
      * - Nullable, no default
      */
      balance?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **users.ccid**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      ccid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **users.full_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      full_name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **users.foip**
      * - `bool` in database
      * - Nullable, no default
      */
      foip?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **users.balance**
      * - `float4` in database
      * - Nullable, no default
      */
      balance?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'users_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* === cross-table types === */

  export type Table = clubs.Table | execs.Table | test.Table | transactions.Table | users.Table;
  export type Selectable = clubs.Selectable | execs.Selectable | test.Selectable | transactions.Selectable | users.Selectable;
  export type JSONSelectable = clubs.JSONSelectable | execs.JSONSelectable | test.JSONSelectable | transactions.JSONSelectable | users.JSONSelectable;
  export type Whereable = clubs.Whereable | execs.Whereable | test.Whereable | transactions.Whereable | users.Whereable;
  export type Insertable = clubs.Insertable | execs.Insertable | test.Insertable | transactions.Insertable | users.Insertable;
  export type Updatable = clubs.Updatable | execs.Updatable | test.Updatable | transactions.Updatable | users.Updatable;
  export type UniqueIndex = clubs.UniqueIndex | execs.UniqueIndex | test.UniqueIndex | transactions.UniqueIndex | users.UniqueIndex;
  export type Column = clubs.Column | execs.Column | test.Column | transactions.Column | users.Column;
  export type AllBaseTables = [clubs.Table, execs.Table, test.Table, transactions.Table, users.Table];
  export type AllForeignTables = [];
  export type AllViews = [];
  export type AllMaterializedViews = [];
  export type AllTablesAndViews = [clubs.Table, execs.Table, test.Table, transactions.Table, users.Table];


  export type SelectableForTable<T extends Table> = {
    clubs: clubs.Selectable;
    execs: execs.Selectable;
    test: test.Selectable;
    transactions: transactions.Selectable;
    users: users.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    clubs: clubs.JSONSelectable;
    execs: execs.JSONSelectable;
    test: test.JSONSelectable;
    transactions: transactions.JSONSelectable;
    users: users.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    clubs: clubs.Whereable;
    execs: execs.Whereable;
    test: test.Whereable;
    transactions: transactions.Whereable;
    users: users.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    clubs: clubs.Insertable;
    execs: execs.Insertable;
    test: test.Insertable;
    transactions: transactions.Insertable;
    users: users.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    clubs: clubs.Updatable;
    execs: execs.Updatable;
    test: test.Updatable;
    transactions: transactions.Updatable;
    users: users.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    clubs: clubs.UniqueIndex;
    execs: execs.UniqueIndex;
    test: test.UniqueIndex;
    transactions: transactions.UniqueIndex;
    users: users.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    clubs: clubs.Column;
    execs: execs.Column;
    test: test.Column;
    transactions: transactions.Column;
    users: users.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    clubs: clubs.SQL;
    execs: execs.SQL;
    test: test.SQL;
    transactions: transactions.SQL;
    users: users.SQL;
  }[T];

}
